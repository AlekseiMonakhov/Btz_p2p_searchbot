from aiogram import types
from aiogram.dispatcher import FSMContext

from data.config import ADMINS
from states.chat import SetChat
import utils.db_api.commands as db
from utils.misc.throttling import rate_limit
from aiogram.dispatcher.filters import Text
from keyboards.default import main_keyboard
from keyboards.inline import chat_set_method, chat_set_method_all, chat_set, methods_, confirmation_keyboard, cancel_keyboard
from utils.cfg_parser import Cfg
from keyboards.inline.admin import google_stats

from loader import dp

def s(integer: int):
    return f'{integer:,}'.replace(',', '.')


@dp.message_handler(Text(contains='–°—Ç–∞—Ä—Ç', ignore_case=True), chat_type='private')
async def to_start_search(message: types.Message, user_db):
    chat = await db.get_chat_alert(message.chat.id)

    if not chat.type_search:
        await message.answer('üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö c Bitzlato –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å!\n'
                             '‚öô–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞.',
                             reply_markup=chat_set_method())
        return

    await db.update_chat_power(message.from_user.id, True)
    await message.answer('üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö c Bitzlato –≤–∫–ª—é—á–µ–Ω—ã!',
                         reply_markup=main_keyboard(True, user_db.is_admin))

@dp.callback_query_handler(chat_set.filter(method='show_all'), chat_type='private')
async def to_show_all_methods(call: types.CallbackQuery):
    await call.message.edit_reply_markup(chat_set_method_all())

@dp.callback_query_handler(chat_set.filter(), chat_type='private')
async def to_start_search_method(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    method = int(callback_data.get('method'))

    await state.update_data(method=method)

    text = '–ø—Ä–æ—Ü–µ–Ω—Ç(—ã)'
    text_2 = '1 –∏–ª–∏ 1.5'
    if method == 7:
        text = '—Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ'
        text_2 = s(Cfg.Binance.get_official_price())

    await call.answer()

    await call.message.answer(f'üßÆ–í–≤–µ–¥–∏—Ç–µ {text} –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —ç—Ç–æ–º—É –º–µ—Ç–æ–¥—É.\n'
                              f'‚öô–ù–∞–ø—Ä–∏–º–µ—Ä: {text_2}', reply_markup=cancel_keyboard)

    await SetChat.wait_input_num.set()

@dp.message_handler(state=SetChat.wait_input_num, chat_type='private')
async def to_start_search_input_num(message: types.Message, state: FSMContext):
    data = await state.get_data()

    t = '–ü—Ä–æ—Ü–µ–Ω—Ç'
    n = '1 –∏–ª–∏ 1.5'
    if data['method'] == 7:
        t = '–°–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ'
        n = s(Cfg.Bitzlato.get_average_price())

    try:
        count = float(message.text)
        if data['method'] != 7:
            if count <= 0 or count > 100:
                await message.answer(f'üßê–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ {t.lower()} –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞.\n'
                                     f'‚öô–í–≤–µ–¥–∏—Ç–µ {t.lower()} –æ—Ç 0.1 –¥–æ 100', reply_markup=cancel_keyboard)
                return
    except ValueError:
        await message.answer(f'üßê–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ {t.lower()} –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞.\n'
                             f'‚öô–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: {n}', reply_markup=cancel_keyboard)
        return

    await state.update_data(count=count)

    await message.answer('‚öô–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Å Bitzlato.\n'
                         f'üìç–ú–µ—Ç–æ–¥: {methods_[data["method"]][1:]}\n'
                         f'üßÆ{t}: {count}', reply_markup=confirmation_keyboard)

    await SetChat.wait_confirm.set()

@dp.callback_query_handler(text='confirm_set', state=SetChat.wait_confirm, chat_type='private')
async def to_start_search_confirm(call: types.CallbackQuery, state: FSMContext, user_db):
    data = await state.get_data()
    chat_id = call.message.chat.id

    await db.update_chat(chat_id, data['method'], data['count'], True)

    await call.message.edit_reply_markup(None)
    await call.message.answer('üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Å Bitzlato –≤–∫–ª—é—á–µ–Ω—ã!',
                              reply_markup=main_keyboard(True, user_db.is_admin))

    await state.finish()


@dp.message_handler(Text(contains='–°—Ç–æ–ø', ignore_case=True), chat_type='private')
async def to_stop_search(message: types.Message, user_db):
    await db.update_chat_power(message.chat.id, False)

    await message.answer('üîï–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö c Bitzlato –≤—ã–∫–ª—é—á–µ–Ω—ã!',
                         reply_markup=main_keyboard(False, user_db.is_admin))


@dp.message_handler(Text(contains='–ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞', ignore_case=True), chat_type='private')
async def to_select_search_method(message: types.Message):
    chat = await db.get_chat_alert(message.chat.id)

    if chat.type_search is None or chat.count is None:
        await to_start_search(message)
        return

    method = methods_[chat.type_search]
    text = '–ü—Ä–æ—Ü–µ–Ω—Ç'
    c = '%'
    if methods_[chat.type_search] == 7:
        text = '–°–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ'
        c = '‚ÇΩ'

    await message.answer(f'üìç–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞?\n'
                         f'‚öô–°–µ–π—á–∞—Å: {method[1:]}\n'
                         f'üßÆ{text}: {chat.count}{c}', reply_markup=chat_set_method())


@dp.message_handler(Text(contains='–ü–æ–º–æ—â—å', ignore_case=True), chat_type='private')
async def to_show_help(message: types.Message):
    text = [
        '–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ "–≤—ã–≥–æ–¥–Ω—ã—Ö" –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, '
        '—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –Ω–∞ –±–∏—Ä–∂–µ <a href="https://bitzlato.com/p2p?currency=RUB">–ë–∏—Ç–∑–ª–∞—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä2—Ä</a> '
        '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ –í–¢–° –∑–∞ —Ä—É–±–ª–∏.',
        '–î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –º–µ—Ç–æ–¥–æ–≤, '
        '–æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∏–∂–µ, –≤—ã—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.',
        '"–í—ã–≥–æ–¥–Ω–æ—Å—Ç—å" –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Å–µ–±—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ '
        '–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞.',
        '–ú–∏–Ω.–ë–¢–ó - –±–æ—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–≥–æ–¥–Ω—ã–º, –µ—Å–ª–∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∞–º–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö '
        '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –±–∏—Ä–∂–µ –ë–∏—Ç–∑–ª–∞—Ç–æ –º–µ–Ω—å—à–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.',
        '–°—Ä–µ–¥.–ë–¢–ó - –±–æ—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–≥–æ–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∏–∂–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ '
        '–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –±–∏—Ä–∂–µ –ë–∏—Ç–∑–ª–∞—Ç–æ.',
        '–ú–µ–¥.–ë–¢–ó - –±–æ—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–≥–æ–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∏–∂–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ '
        '–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –±–∏—Ä–∂–µ –ë–∏—Ç–∑–ª–∞—Ç–æ.',
        '–°—Ä–µ–¥.–ë–ù–° - –±–æ—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–≥–æ–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∏–∂–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ '
        '–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –±–∏—Ä–∂–µ –ë–∏–Ω–∞–Ω—Å.',
        '–ú–∏–Ω.–ë–ù–° –±–æ—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–≥–æ–¥–Ω—ã–º, –µ—Å–ª–∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∞–º–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö '
        '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –±–∏—Ä–∂–µ –ë–∏–Ω–∞–Ω—Å –º–µ–Ω—å—à–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.',
        '–ú–µ–¥.–ë–ù–° - –±–æ—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–≥–æ–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∏–∂–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ '
        '–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –±–∏—Ä–∂–µ –ë–∏–Ω–∞–Ω—Å.',
        '–ö—É—Ä—Å.–ë–ù–° - –±–æ—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–≥–æ–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∏–∂–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫—É—Ä—Å–∞ '
        'BTC –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.',
        '–°—Ä–µ–¥–Ω–µ–µ –∏ –º–µ–¥–∏–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥.',
        '–°–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ - –±–æ—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–≥–æ–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∏–∂–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–Ω–∞—á–µ–Ω–∏—è.',
        '–ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –°—Ç–æ–ø, –∏–ª–∏ –µ—Å–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –°—Ç–∞—Ä—Ç',
        '–ü–æ –∫–Ω–æ–ø–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–π–º–∞–Ω–Ω—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞'
    ]

    await message.answer('\n'.join(text))


@rate_limit(30, 'statistika')
@dp.message_handler(Text(contains='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', ignore_case=True), chat_type='private')
async def to_show_statistics(message: types.Message, user_db):
    msg = await message.answer('‚è≥–ü–æ–¥–æ–∂–¥–∏—Ç–µ...')

    if str(message.from_user.id) in ADMINS or user_db.is_admin is True:
        reply_markup = google_stats
    else:
        reply_markup = None

    emoji = ['üîπ', 'üî∏']
    send_to = []
    logs = {}

    logs_bitzlato = await db.get_logs(message.from_user.id)
    logs_binance = await db.get_logs_binance(message.from_user.id)
    logs_all = list(logs_binance) + list(logs_bitzlato)

    for log_ in logs_all:
        method = log_.type_search
        count = log_.count

        z = '%'
        if method == 7:
            z = '‚ÇΩ'

        log = f"<b>{methods_[method][1:]}</b> –ø—Ä–∏ {count}{z}"
        if c := logs.get(log):
            logs.update({log: c + 1})
        else:
            logs.setdefault(log, 1)

    logs = sorted(logs.items(), key=lambda i: i[1], reverse=True)

    string_count = 0
    for e in logs:
        send_to.append(f'{emoji[string_count % 2]}–ú–µ—Ç–æ–¥ {e[0]} –Ω–∞—à—ë–ª <b>{e[1]}</b> –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π')
        string_count += 1

    if string_count == 0:
        await msg.edit_text(f'<b>‚è≥–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞</b>\n'
                            '‚ùå–ù–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=reply_markup)
        return

    await msg.edit_text(f'<b>‚è≥–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞</b>\n' +
                        '\n'.join(send_to), reply_markup=reply_markup)

@dp.callback_query_handler(text='cancel', state='*', chat_type='private')
async def to_cancel(call: types.CallbackQuery, state: FSMContext):
    if await state.get_state():
        await call.message.edit_text('‚ùå–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=None)
        await state.finish()
        return
    await call.answer()
