from loguru import logger
from aiogram import types
import humanize
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from data.config import ADMINS
from keyboards.default import main_keyboard
from keyboards.inline.admin import admin_panel, admin_call, show_user, give_sub
from handlers.users.bitzlato_p2p_alert import consider
import utils.db_api.commands as db
from keyboards.inline import methods_, times
from filters import Admin
from keyboards.inline.chat import get_time
from utils.cfg_parser import Cfg
from aiogram.utils.markdown import quote_html

from loader import dp

humanize.i18n.activate("ru_RU")

def s(integer: int):
    return f'{integer:,}'.replace(',', '.')


@dp.message_handler(Admin(), Text(contains='–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', ignore_case=True), chat_type='private')
async def to_show_admin_panel(message: types.Message, update_message=False):
    last_update = Cfg.last_update
    bz_av_price = Cfg.Bitzlato.get_average_price()
    bz_md_price = Cfg.Bitzlato.get_median_price()

    bn_av_price = Cfg.Binance.get_average_price()
    bn_md_price = Cfg.Binance.get_median_price()
    bn_of_price = Cfg.Binance.get_official_price()

    text = [f'üìç<b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>',
            f'üü†Bitzlato:',
            f'üîπ–°—Ä–µ–¥–Ω—è—è: {s(bz_av_price)}‚ÇΩ',
            f'üîπ–ú–µ–¥–∏–∞–Ω–Ω–∞—è: {s(bz_md_price)}‚ÇΩ',
            f'üü°Binance:',
            f'üîπ–°—Ä–µ–¥–Ω—è—è: {s(bn_av_price)}‚ÇΩ',
            f'üîπ–ú–µ–¥–∏–∞–Ω–Ω–∞—è: {s(bn_md_price)}‚ÇΩ',
            f'üîπ–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è: {s(bn_of_price)}‚ÇΩ',
            f'üï∞–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {humanize.naturaltime(last_update)}']
    if update_message is False:
        await message.answer('\n'.join(text), reply_markup=admin_panel)
    elif update_message is True:
        await message.edit_text('\n'.join(text), reply_markup=admin_panel)


@dp.callback_query_handler(Admin(), admin_call.filter(action='call_consider'), chat_type='private')
async def to_show_consider(call: types.CallbackQuery):
    text = '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!'
    try:
        logger.info(f'{call.from_user.full_name} –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ —Å Bitzlato/Binance!')
        await consider()
    except Exception as err:
        logger.info('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö c Bitzlato/Binance!')
        logger.error(err)
        text = f'–û—à–∏–±–∫–∞!\n{err}'
    await call.answer(text, show_alert=True, cache_time=3)
    call.message.from_user.id = call.from_user.id
    await to_show_admin_panel(call.message, update_message=True)


@dp.callback_query_handler(Admin(), admin_call.filter(action='show_users'), chat_type='private')
async def to_show_users(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    users = types.InlineKeyboardMarkup(row_width=2)
    arg = callback_data.get('arg')
    skip, limit = (int(e) for e in arg.split('-'))
    await state.update_data(show_users_arg=arg)

    i = 0
    for user in await db.get_users(skip, limit + 1):
        is_access = db.check_access(user)
        if is_access is None:
            is_access = '‚óº'
        elif is_access is False:
            is_access = '‚ùå'
        else:
            is_access = '‚úÖ'
        if user.is_admin is True:
            is_access = 'üëÆ'
            if str(user.id_) in ADMINS:
                is_access = 'üé©'
        i += 1
        if i != 21:
            users.insert(
                types.InlineKeyboardButton(
                    text=is_access + user.name,
                    callback_data=show_user.new(id_=user.id_, action='show', arg='show')
                )
            )

    if skip != 0:
        users.row(
            types.InlineKeyboardButton(
                text='‚¨Ö',
                callback_data=admin_call.new(action='show_users', arg=f'{skip - 20}-{limit - 20}')
            )
        )
        if i == 21:
            users.insert(
                types.InlineKeyboardButton(
                    text='‚û°',
                    callback_data=admin_call.new(action='show_users', arg=f'{skip + 20}-{limit + 20}')
                )
            )
    else:
        if i == 21:
            users.row(
                types.InlineKeyboardButton(
                    text='‚û°',
                    callback_data=admin_call.new(action='show_users', arg=f'{skip + 20}-{limit + 20}')
                )
            )

    count_users = await db.get_count_users()
    await call.answer()
    await call.message.edit_text(f'üìç<b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n'
                                 f'‚úè<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</i>\n'
                                 f'üë§–í—Å–µ–≥–æ: {count_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n'
                                 f'‚úÖ - –ï—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞\n'
                                 f'‚ùå - –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\n'
                                 f'‚óº - –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã–π —é–∑–µ—Ä\n'
                                 f'üëÆ‚ÄçÔ∏è- –ê–¥–º–∏–Ω\n'
                                 f'üé© - –í–ª–∞–¥–µ–ª–µ—Ü', reply_markup=users)


@dp.callback_query_handler(Admin(), show_user.filter(action='show'), chat_type='private')
async def to_show_user(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    id_ = int(callback_data.get('id_'))
    user = await db.get_user(id_)
    chat = await db.get_chat_alert(id_)
    data = await state.get_data()
    try:
        show_users_arg = data['show_users_arg']
    except KeyError:
        show_users_arg = '0-20'

    username = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    if user.username:
        username = '@' + user.username

    is_admin = '–ù–µ—Ç—É'
    if user.is_admin is True:
        is_admin = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        if str(user.id_) in ADMINS:
            is_admin = '–í–ª–∞–¥–µ–ª–µ—Ü'

    is_access = '–ï—Å—Ç—å'
    if user.is_access is False:
        is_access = '–ù–µ—Ç'

    sub = '–ù–µ –±—ã–ª–æ'
    sub_time = ''
    if user.time_access:
        if db.check_access(user) is False:
            sub = f'–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å\n'
            sub_time = f'üïê–î–æ: {user.time_access.strftime("%Y-%m-%d %X")}\n' \
                       f'‚è≥–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å {humanize.naturaltime(user.time_access)}'
        elif db.check_access(user) is True:
            sub = f'–ê–∫—Ç–∏–≤–Ω–∞\n'
            sub_time = f'üïê–î–æ: {user.time_access.strftime("%Y-%m-%d %X")}\n' \
                       f'‚è≥–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è {humanize.naturaltime(user.time_access)}'

    create_at = f'–°–æ–∑–¥–∞–Ω–∞: {user.create_at.strftime("%Y-%m-%d %X")} ({humanize.naturaltime(user.create_at)})'
    updated_at = f'–û–±–Ω–æ–≤–ª–µ–Ω–∞: {user.updated_at.strftime("%Y-%m-%d %X")} ({humanize.naturaltime(user.updated_at)})'

    power = '–í—ã–∫–ª—é—á–µ–Ω–æ'
    if chat.power is True:
        power = '–í–∫–ª—é—á–µ–Ω–æ\n' \
                f'üßÆ–ú–µ—Ç–æ–¥: {methods_[chat.type_search][1:]}\n' \
                f'‚öñ–ü—Ä–æ—Ü–µ–Ω—Ç/–∑–Ω–∞—á–µ–Ω–∏–µ: {chat.count}'

    actions = types.InlineKeyboardMarkup(row_width=2)
    if str(id_) not in ADMINS and user.id_ != call.from_user.id:
        actions.insert(types.InlineKeyboardButton(
            text='üí≥–ü–æ–¥–ø–∏—Å–∫–∞',
            callback_data=admin_call.new(action='main_sub', arg=user.id_)))

    if str(id_) not in ADMINS and user.id_ != call.from_user.id:
        actions.insert(types.InlineKeyboardButton(
            text='‚ùå–£–¥–∞–ª–∏—Ç—å',
            callback_data=admin_call.new(action='set_access', arg=user.id_)))
        actions.insert(types.InlineKeyboardButton(
            text='ü§ê–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å',
            callback_data=admin_call.new(action='ignore_user', arg=user.id_)
        ))

    if str(call.from_user.id) in ADMINS:
        if is_admin == '–ù–µ—Ç—É':
            actions.insert(types.InlineKeyboardButton(
                text='üëÆ–í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞',
                callback_data=admin_call.new(action='set_admin', arg=user.id_)))
        elif is_admin == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
            actions.insert(types.InlineKeyboardButton(
                text='üëÆ–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞',
                callback_data=admin_call.new(action='set_admin', arg=user.id_)))

    actions.insert(
        types.InlineKeyboardButton(
            text='‚¨Ö–ù–∞–∑–∞–¥',
            callback_data=admin_call.new(action='show_users', arg=show_users_arg)
        )
    )
    await call.answer()
    await call.message.edit_text(f'üìç<b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n'
                                 f'‚úè<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> <a tg://user?id={user.id_}>{quote_html(user.name)}</a>\n'
                                 f'üÜî–ê–π–¥–∏: <code>{user.id_}</code>\n'
                                 f'üè∑–Æ–∑–µ—Ä–Ω–µ–π–º: {username}\n'
                                 f'‚öô–ü—Ä–∞–≤–∞: {is_admin}\n'
                                 f'üîë–î–æ—Å—Ç—É–ø: {is_access}\n\n'
                                 f'üí≥–ü–æ–¥–ø–∏—Å–∫–∞: {sub}{sub_time}\n\n'
                                 f'üîî–ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {power}\n\n'
                                 f'üîñ–ó–∞–ø–∏—Å—å –≤ –±–∞–∑–µ:\n'
                                 f'üîé{create_at}\n'
                                 f'üîé{updated_at}\n',
                                 reply_markup=actions)


@dp.callback_query_handler(Admin(), admin_call.filter(action='main_sub'), chat_type='private')
async def to_show_sub(call: types.CallbackQuery, callback_data: dict):
    user_id = int(callback_data.get('arg'))
    user = await db.get_user(user_id)

    sub = '–ù–µ –±—ã–ª–æ'
    sub_time = ''
    if user.time_access:
        if db.check_access(user) is False:
            sub = f'–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å\n'
            sub_time = f'üïê–î–æ: {user.time_access.strftime("%Y-%m-%d %X")}\n' \
                       f'‚è≥–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å {humanize.naturaltime(user.time_access)}'
        elif db.check_access(user) is True:
            sub = f'–ê–∫—Ç–∏–≤–Ω–∞\n'
            sub_time = f'üïê–î–æ: {user.time_access.strftime("%Y-%m-%d %X")}\n' \
                       f'‚è≥–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è {humanize.naturaltime(user.time_access)}'

    actions = types.InlineKeyboardMarkup(row_width=2)
    if db.check_access(user) in (False, None):
        actions.insert(types.InlineKeyboardButton(
            text='üî∏–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
            callback_data=admin_call.new(action='give_sub', arg=user.id_)
        ))
    else:
        actions.insert(types.InlineKeyboardButton(
            text='üî∏–ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
            callback_data=admin_call.new(action='pick_up_sub', arg=user.id_)
        ))
    actions.insert(types.InlineKeyboardButton(
        text='‚¨Ö–ù–∞–∑–∞–¥',
        callback_data=show_user.new(id_=user.id_, action='show', arg='show')
    ))
    await call.answer()
    await call.message.edit_text(f'üìç<b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n'
                                 f'‚úè<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> {user.name}\n'
                                 f'üí≥–ü–æ–¥–ø–∏—Å–∫–∞: {sub} {sub_time}\n'
                                 f'‚úè–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=actions)


@dp.callback_query_handler(Admin(), admin_call.filter(action='pick_up_sub'), chat_type='private')
async def to_pick_up_sub(call: types.CallbackQuery, callback_data: dict):
    user_id = int(callback_data.get('arg'))

    await db.set_sub_user(user_id, None)
    await db.update_chat_power(user_id, False)

    await call.answer(f'üí°–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', cache_time=3)
    await to_show_sub(call, {'arg': user_id})

    logger.info(f'üëÆ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {call.from_user.full_name} –∑–∞–±—Ä–∞–ª –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id-{user_id}')

    await dp.bot.send_message(chat_id=user_id, text=f'üëÆ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±—Ä–∞–ª —É –≤–∞—Å –ø–æ–¥–ø–∏—Å–∫—É.',
                              reply_markup=types.ReplyKeyboardRemove())


@dp.callback_query_handler(Admin(), admin_call.filter(action='give_sub'), chat_type='private')
async def to_show_time_give_sub(call: types.CallbackQuery, callback_data: dict):
    user = int(callback_data.get('arg'))
    user = await db.get_user(user)

    msg_text = call.message.html_text.split('\n')
    msg_text.pop()
    msg_text = '\n'.join(msg_text)

    await call.message.edit_text(f'{msg_text}\n'
                                 f'‚è≥–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n',
                                 reply_markup=get_time(user.id_))


@dp.callback_query_handler(Admin(), give_sub.filter(), chat_type='private')
async def to_give_sub(call: types.CallbackQuery, callback_data: dict):
    user_id = int(callback_data.get('id_'))
    time = int(callback_data.get('time_index'))
    time = list(times().values())[time]

    await db.set_sub_user(user_id, time)

    await call.answer(f'üí°–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!', cache_time=3)
    await to_show_sub(call, {'arg': user_id})

    logger.info(f'üëÆ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {call.from_user.full_name} –≤—ã–¥–∞–ª –ø–æ–¥–ø–∏—Å–∫—É –¥–æ {time} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id-{user_id}')

    await dp.bot.send_message(chat_id=user_id, text=f'üëÆ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º –ø–æ–¥–ø–∏—Å–∫—É –¥–æ {time.strftime("%Y-%m-%d %X")}!',
                              reply_markup=main_keyboard(True))


@dp.callback_query_handler(Admin(), admin_call.filter(action='set_access'), chat_type='private')
async def to_set_access_ban(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    user_id = int(callback_data.get('arg'))
    user = await db.get_user(user_id)

    await db.delete_user(user)

    await call.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!')
    await to_show_users(call, callback_data={'arg': '0-20'}, state=state)

    logger.info(f'üëÆ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {call.from_user.full_name} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} ({user_id})')


@dp.callback_query_handler(Admin(), admin_call.filter(action='set_admin'), chat_type='private')
async def to_give_admin(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    user_id = int(callback_data.get('arg'))
    user = await db.get_user(user_id)

    if user.is_admin is True:
        await db.delete_admin(user_id)
        await call.answer('–í—ã –∑–∞–±—Ä–∞–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        z = '–∑–∞–±—Ä–∞–ª —É –≤–∞—Å'
    else:
        await db.set_admin(user_id)
        await call.answer('–í—ã –≤—ã–¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        z = '–≤—ã–¥–∞–ª –≤–∞–º'
    await to_show_user(call, {'id_': user_id}, state)

    logger.info(f'üëÆ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {call.from_user.full_name} {z.split(" ")[0]} –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.name}({user_id})')

    await dp.bot.send_message(chat_id=user_id,
                              text=f'üëÆ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {z} –ø—Ä–∞–≤–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
                              reply_markup=main_keyboard(user.power, True))

@dp.callback_query_handler(Admin(), admin_call.filter(action='ignore_user'), chat_type='private')
async def to_ignore_user(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    try:
        user_id = int(callback_data.get('arg'))
    except ValueError:
        user_id = int(callback_data.get('arg')[:-1])

    await db.set_ignore(user_id)
    await call.answer(f'‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è!')
    logger.info(f'üëÆ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {call.from_user.full_name} –≤—ã–¥–∞–ª —Å—Ç–∞—Ç—É—Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id-{user_id}')
    if callback_data.get('arg')[-1:] == '-':
        msg_text = call.message.html_text.split('\n')
        msg_text.pop()
        msg_text = '\n'.join(msg_text)

        await call.message.edit_text(f'{msg_text}\n'
                                     f'‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.')
    else:
        data = await state.get_data()
        if 'show_users_arg' in data:
            await to_show_users(call, {'arg': data['show_users_arg']}, state)
        else:
            await to_show_users(call, {'arg': '0-20'}, state)
