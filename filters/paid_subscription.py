# import humanize
from aiogram import types
from aiogram.dispatcher.filters import BoundFilter
from utils.db_api.commands import get_user, check_access
from loader import cache


class PaidUser(BoundFilter):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —é–∑–µ—Ä–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ
    –∫—É–ø–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫—É–ø–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.
    Message –∏ CallbackQuery
    """

    async def check(self, obj: types.Update):
        if isinstance(obj, types.Message):
            user_id = obj.from_user.id
        elif isinstance(obj, types.CallbackQuery):
            user_id = obj.from_user.id
        else:
            return False

        if user := cache.get(user_id):
            pass
        else:
            user = await get_user(user_id)
            cache[user_id] = user

        user_access = check_access(user)
        if user_access is None:
            return False
        elif user_access is False:
            pass
            # await call.message.answer('üòï–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É –Ω–∏—á–µ–º –≤–∞–º –ø–æ–º–æ—á—å.\n'
            #                          f'‚åõ–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {humanize.naturaltime(user.time_access)}',
            #                          reply_markup=types.ReplyKeyboardRemove())
        return user_access
